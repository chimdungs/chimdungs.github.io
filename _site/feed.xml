

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Jiyoung Seo</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-02-07T17:45:11+09:00</updated>
  <author>
    <name>Jiyoung Seo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 Jiyoung Seo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Graphics-Ch6. Transformation Matrices</title>
    <link href="http://localhost:4000/posts/ch6-Transformation_Matrices/" rel="alternate" type="text/html" title="Graphics-Ch6. Transformation Matrices" />
    <published>2025-02-07T13:04:00+09:00</published>
  
    <updated>2025-02-07T17:13:14+09:00</updated>
  
    <id>http://localhost:4000/posts/ch6-Transformation_Matrices/</id>
    <content type="text/html" src="http://localhost:4000/posts/ch6-Transformation_Matrices/" />
    <author>
      <name>jiyoung</name>
    </author>

  
    
    <category term="Graphics" />
    
    <category term="Study" />
    
  

  <summary>Introduction

  Chapter 5는 선형대수학(Linear Algebra)이라 아는 내용이 많아서 정리 생략
  Transformation matrix는 왜 필요한가 : Rotation, Translation, Scaling, Projection같은 기하학적 변환에서 행렬 곱을 통해 변환되는데 이때 변환 행렬이 필요함


1. 2D Linear Transformations

  
    2D vector를 2x2 행렬로 변환하는 과정은 아래처럼 전개됨 : 

\[\begin{bmatrix} a_{11} &amp;amp;amp; a_{12} \\ a_{21} &amp;amp;amp; a_{22} \end{bmatrix}  \begin{bmatrix} x \\ y \end{bmatrix} = \begin{bmatrix} ...</summary>

  </entry>

  
  <entry>
    <title>Graphics-Ch4. Ray Tracing</title>
    <link href="http://localhost:4000/posts/ch4-Ray-Tracing/" rel="alternate" type="text/html" title="Graphics-Ch4. Ray Tracing" />
    <published>2025-02-04T17:34:00+09:00</published>
  
    <updated>2025-02-07T17:13:14+09:00</updated>
  
    <id>http://localhost:4000/posts/ch4-Ray-Tracing/</id>
    <content type="text/html" src="http://localhost:4000/posts/ch4-Ray-Tracing/" />
    <author>
      <name>jiyoung</name>
    </author>

  
    
    <category term="Graphics" />
    
    <category term="Study" />
    
  

  <summary>Rendering

  Object based Rendering
    
      각각의 object단위로 고려됨
      물체가 존재하는 모든 픽셀들이 찾아지고 업데이트 됨
    
  
  Image based Rendering
    
      각각의 pixel단위로 고려됨
      물체에 영향을 주는 각 pixel들이 찾아지고 업데이트 됨

둘의 차이점에 대해서는 ch8에서 더 자세하게 다룬다
    
  




Ray Tracing이란

  3D Scene을 렌더링하는데에 사용되는 image-order 알고리즘
  object-order rendering에서 사용되어지는 수학적 방법


1. Basic Ray-Tracing Algorithm

  image상의 Pixel에서 ray t...</summary>

  </entry>

  
  <entry>
    <title>2D Gaussian Splatting, SIGGRAPH 2024</title>
    <link href="http://localhost:4000/posts/2DGS/" rel="alternate" type="text/html" title="2D Gaussian Splatting, SIGGRAPH 2024" />
    <published>2025-02-03T16:34:00+09:00</published>
  
    <updated>2025-02-07T12:14:47+09:00</updated>
  
    <id>http://localhost:4000/posts/2DGS/</id>
    <content type="text/html" src="http://localhost:4000/posts/2DGS/" />
    <author>
      <name>jiyoung</name>
    </author>

  
    
    <category term="Paper Review" />
    
  

  <summary>Intro


  3DGS : Redering결과 Inconsistency한 depth발생, 왜냐하면 pixel ray사이의 intersection을 통해 gaussian value를 구하기 때문
  2DGS : explicit ray-splat intersection 이용
  surface normal 정확하게 추출하면 mesh도 잘 구해짐
    
      
        depth distortion

        : 2D primitives에 집중해서 더 좁은 범위의 ray에 가우시안들이 분포하게 해줌
      
      
        normal consistency

        : rendered normal map과 rendered depth의 gradient 사이의 discr...</summary>

  </entry>

  
  <entry>
    <title>Graphics-Ch3. Raster Images</title>
    <link href="http://localhost:4000/posts/ch3-Raster/" rel="alternate" type="text/html" title="Graphics-Ch3. Raster Images" />
    <published>2025-01-29T18:00:00+09:00</published>
  
    <updated>2025-02-07T14:18:10+09:00</updated>
  
    <id>http://localhost:4000/posts/ch3-Raster/</id>
    <content type="text/html" src="http://localhost:4000/posts/ch3-Raster/" />
    <author>
      <name>jiyoung</name>
    </author>

  
    
    <category term="Graphics" />
    
    <category term="Study" />
    
  

  <summary>Chapter 3. Raster Images
서론

  Raster image : 2D 행렬 형태로 픽셀에 대한 RGB color값을 표현한 이미지
    
      RGB 색상은 3차원 벡터 형태
    
  
  디지털 카메라는 image sensor를 포함하고 있는데, 이것은 빛이 들어오는 정도(intensity)와 color를 구성하고 있음
  하지만 우리가 이러한 2D array자체로 이미지를 보지는 않음,
    
      이미지 픽셀과 디스플레이 픽셀간의 매칭(direct link)이 필요하고 이를 Rasterizer가 처리함
    
  
  Vector Image : 픽셀에 대한 행렬형태로 나타내는 것이 아니라, shape이랑 line, curves로 경계지어진 color 영역에 대...</summary>

  </entry>

  
  <entry>
    <title>Graphics STUDY</title>
    <link href="http://localhost:4000/posts/Graphics_study/" rel="alternate" type="text/html" title="Graphics STUDY" />
    <published>2025-01-25T11:00:00+09:00</published>
  
    <updated>2025-02-07T12:14:47+09:00</updated>
  
    <id>http://localhost:4000/posts/Graphics_study/</id>
    <content type="text/html" src="http://localhost:4000/posts/Graphics_study/" />
    <author>
      <name>jiyoung</name>
    </author>

  
    
    <category term="Graphics" />
    
    <category term="Study" />
    
  

  <summary>Fundamentals of Computer Graphics by Steve Marschner and Peter Shirley

  교수님 추천 책, (“그래픽스에서 가장 유명한, 정석 같은 책이에요. 그래픽스의 거의 모든 분야 다룸”)
  아직 차례만 보긴 했는데 깊게 알고싶었던 내용 총집합인 것 같아서 아주 마음에 든다




Contents

1. Introduction

  1.1 Graphics Areas
  1.2 Major Applications
  1.3 Graphics APIs
  1.5 Numerical Issues
  1.6 Efficiency
  1.7 Designing and Coding Graphics Programs 



2. Miscellaneous Math

  2.1 ...</summary>

  </entry>

</feed>


